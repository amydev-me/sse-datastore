{"version":3,"sources":["index.js"],"names":["API_URL","Counter","props","state","name","isLoaded","value","inputValue","inputValueChanged","bind","updateValue","addToCounter","setCounter","refreshCounter","deleteCounter","this","timerID","setInterval","clearInterval","evt","newValue","target","replace","setState","fetch","then","res","text","error","requestOptions","method","body","console","log","deleteCounterHandler","class","type","onChange","onClick","React","Component","App","counters","counterNameInput","errorMessage","addCounter","counterNameInputChanged","push","newCounterNameInput","index","indexOf","splice","counterElements","counter","id","autoFocus","title","pattern","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebf37b59.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n/**\n * Styles\n */\n \n\n/**\n * API\n */\nconst API_URL = 'https://counters-dot-sse-2021-jk.appspot.com/api/';\n\n/**\n * Components\n */\nclass Counter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: props.name,\n            isLoaded: false,\n            value: 0,\n            inputValue: ''\n        };\n        this.inputValueChanged = this.inputValueChanged.bind(this);\n        this.updateValue = this.updateValue.bind(this);\n        this.addToCounter = this.addToCounter.bind(this);\n        this.setCounter = this.setCounter.bind(this);\n        this.refreshCounter = this.refreshCounter.bind(this);\n        this.deleteCounter = this.deleteCounter.bind(this);\n    }\n    componentDidMount() {\n        this.updateValue();\n        // Set up a timer to update the value every second\n        this.timerID = setInterval(\n            () => this.updateValue(),\n            1000\n        );\n    }\n    componentWillUnmount() {\n        // Clear the timer when the counter is deleted\n        clearInterval(this.timerID);\n    }\n    inputValueChanged(evt) {\n        // Strip all non-numeric characters from the string as these return NaN form the API and set the counter to 0.\n        const newValue = evt.target.value.replace(/\\D/g,'');\n        this.setState({inputValue: newValue});\n    }\n    updateValue() {\n        // get the value from the API\n        fetch(API_URL + this.state.name)\n        .then(res => res.text())\n      .then(\n        (res) => {\n          this.setState({\n            isLoaded: true,\n            value: res\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n    addToCounter(evt) {\n        const requestOptions = {\n            method: 'POST',\n            body: this.state.inputValue\n        };\n        fetch(API_URL + this.state.name, requestOptions)\n        .then(res => res.text())\n      .then(\n        (res) => {\n            console.log(res);\n          this.setState({\n            isLoaded: true,\n            value: res\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n    setCounter(evt) {\n        const requestOptions = {\n            method: 'PUT',\n            body: this.state.inputValue\n        };\n        fetch(API_URL + this.state.name, requestOptions)\n        .then(res => res.text())\n      .then(\n        (res) => {\n            console.log(res);\n          this.setState({\n            isLoaded: true,\n            value: res\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n    refreshCounter(evt) {\n        this.updateValue();\n    }\n    deleteCounter(evt) {\n        const requestOptions = {\n            method: 'DELETE',\n        };\n        fetch(API_URL + this.state.name, requestOptions)\n      .then(\n        (res) => {\n            console.log(res);\n          this.setState({\n            isLoaded: false,\n          });\n          // Ask the parent component to delete this counter.\n          this.props.deleteCounterHandler(this.props.name)\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n    render() {\n        const { error, isLoaded} = this.state;\n        if (error) {\n            console.log(error);\n            return (\n                <div class=\"counter\">\n                        <p class=\"name\">{this.state.name} : ERROR</p>\n                </div>\n            );\n        } else if (!isLoaded) {\n            return (\n                <div class=\"counter\">\n                        <p class=\"name\">{this.state.name} : Loading...</p>\n                </div>\n            );\n        } else {\n            return (\n                <div class=\"counter\">\n                        <p class=\"name\">{this.state.name} : {this.state.value}</p>\n                        <input type=\"number\" class=\"counter_newval\" value={this.state.inputValue} onChange={this.inputValueChanged}/>\n                        <button class=\"add\" onClick={this.addToCounter}>add</button>\n                        <button class=\"set\" onClick={this.setCounter}>set</button>\n                        <button class=\"delete\" onClick={this.deleteCounter}>delete</button>\n                        <button class=\"refresh\" onClick={this.updateValue}>refresh</button>\n                </div>\n            );\n        }\n    }\n}\n\n/**\n * Base Application Component\n */\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            counters: [],\n            counterNameInput: '',\n            errorMessage: ''\n        }\n\n        this.deleteCounterHandler = this.deleteCounterHandler.bind(this);\n        this.addCounter = this.addCounter.bind(this);\n        this.counterNameInputChanged = this.counterNameInputChanged.bind(this);\n        this.deleteCounterHandler = this.deleteCounterHandler.bind(this)\n    }\n    addCounter(evt) {\n        if (this.state.counterNameInput != '') {\n            const counters = this.state.counters;\n            counters.push(this.state.counterNameInput);\n            this.setState({\n                counters: counters,\n            });\n        }\n    }\n    counterNameInputChanged(evt) {\n        // Only allow numbers and letters (no spaces)\n        const newCounterNameInput = evt.target.value.replace(/[^a-z0-9]/gi,'');\n        this.setState({counterNameInput: newCounterNameInput});\n    }\n    // Passed to counter components so they can request deletion\n    deleteCounterHandler(name) {\n        const counters = this.state.counters;\n        const index = counters.indexOf(name);\n        if (index > -1) {\n            counters.splice(index, 1);\n        }\n        this.setState({counters: counters});\n        console.log(this.state.counters)\n    }\n    render() {\n        // Render all of the counter components as defined by the state\n        const counterElements = [];\n        for (const counter in this.state.counters) {\n            counterElements.push(<Counter name={this.state.counters[counter]} deleteCounterHandler={this.deleteCounterHandler}/>);\n        }\n        return (\n        <main>\n                <header>\n                <h1>SSE : API with datastore</h1>\n                </header>\n                <section id=\"add-counter\">\n                    <p>\n                        <input  autoFocus id=\"add-name\"\n                                title=\"only accepts digits and letters a-z\"\n                                pattern=\"[a-zA-Z0-9_]+\"\n                                placeholder=\"Enter name...\"\n                                value={this.props.counterNameInput}\n                                onChange={this.counterNameInputChanged}\n                        />\n                        <button id=\"add-counter\" onClick={this.addCounter}>Create</button>\n                    </p>\n                </section>\n                <section id=\"counters\">\n                    {counterElements}\n                </section>\n                <footer>\n        <p id=\"error\">{this.props.errorMessage}</p>\n                </footer>\n        </main>\n        );\n    }\n}\n  \n/**\n * Initial Render\n */\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}
